import numpy as np
import cvxpy as cp
from MPC_controller import MPC_controller
import matplotlib.pyplot as plt

A = np.array([[1, 0, 0],
              [0, 1, 0],
              [0, 0, 1]])

B = np.array([[1, 0, 0],
              [0, 1, 0],
              [0, 0, 1]])

# Define the cost function (quadratic cost with reference tracking)
Q = np.diag([1000, 1000, 1000])  # State cost matrix
R = np.diag([0.1, 0.1, 0.1])     # Control cost matrix

N = 5
intitial_state = np.array([1.5, -0.5, 0.5]
sampling_time = 0.5

controller = MPC_controller(A, B, Q, R, N, intitial_state, sampling_time)

ref_index = 0
sequence = np.array([
    [-5.69767701e-02,  1.00512585e-03,  4.86117567e-02],
    [-9.51935405e-02,  4.63777938e-03,  7.50264374e-02],
    [-1.57517548e-01,  1.19982652e-02,  1.15520835e-01],
    [-2.30863440e-01, -1.99338298e-03,  1.75048541e-01],
    [-2.94523714e-01, -1.53145613e-02,  2.18340635e-01],
    [-3.37105760e-01, -2.44143129e-02,  2.32241617e-01],
    [-4.09058292e-01, -3.27786826e-02,  2.41833969e-01],
    [-4.97346872e-01, -4.89312467e-02,  2.47913182e-01],
    [-5.29337430e-01, -5.68141553e-02,  2.49271221e-01],
    [-6.19516060e-01, -4.43180499e-02,  2.45976958e-01],
    [-6.42838556e-01, -3.71077668e-02,  2.49408358e-01],
    [-7.30898178e-01,  1.68660655e-03,  2.42521128e-01],
    [-7.80113887e-01,  3.20361129e-02,  2.49491107e-01],
    [-8.77793949e-01,  3.44137685e-02,  2.45068981e-01],
    [-9.12634920e-01,  2.22643572e-02,  2.42031635e-01],
    [-1.00516266e+00,  1.33330693e-03,  2.48671995e-01],
    [-1.04533087e+00,  3.76767328e-03,  3.16666320e-01],
    [-1.06109770e+00,  9.61206811e-03,  3.48844567e-01],
    [-1.09757940e+00, -9.28393909e-04,  4.38893408e-01],
    [-1.13003111e+00, -1.91688148e-02,  5.30076693e-01],
    [-1.13083450e+00, -2.01383345e-02,  5.63044845e-01],
    [-1.14219349e+00, -2.38205874e-02,  6.56448864e-01],
    [-1.17008285e+00, -4.02550513e-02,  7.49183333e-01],
    [-1.12071579e+00, -4.88594514e-02,  8.26905893e-01],
    [-1.07378852e+00, -5.06948385e-02,  8.72461705e-01],
    [-1.03302535e+00, -4.51698601e-02,  9.18022617e-01],
    [-9.71332048e-01, -4.80300514e-02,  9.79245976e-01],
    [-9.10742522e-01, -4.19695193e-02,  1.04596465e+00],
    [-8.30714460e-01, -3.15043735e-02,  1.09806391e+00],
    [-8.22620634e-01, -3.11974198e-02,  1.10392870e+00],
    [-7.38300191e-01, -2.51202567e-02,  1.15258370e+00],
    [-6.80336561e-01, -1.80433779e-02,  1.20514942e+00],
    [-6.23484162e-01, -2.68280405e-04,  1.24838381e+00],
    [-5.67044786e-01,  4.47059285e-03,  1.27991322e+00],
    [-5.08720010e-01, -1.66007020e-02,  1.34949535e+00],
    [-5.01442838e-01, -2.86362716e-02,  1.36581412e+00],
    [-5.05651552e-01, -7.99460505e-02,  1.44969302e+00],
    [-5.11529857e-01, -1.19400021e-01,  1.48955579e+00],
    [-4.95768772e-01, -1.25066233e-01,  1.50441278e+00],
    [-4.44606607e-01, -1.13491651e-01,  1.53020406e+00],
    [-3.61674758e-01, -1.03759722e-01,  1.57410782e+00],
    [-3.52559198e-01, -1.01144588e-01,  1.57728077e+00],
    [-3.43443638e-01, -9.85294537e-02,  1.58045373e+00],
    [-3.34328078e-01, -9.59143197e-02,  1.58362668e+00],
    [-3.25212518e-01, -9.32991857e-02,  1.58679964e+00],
    [-3.16096959e-01, -9.06840517e-02,  1.58997259e+00],
    [-3.06981399e-01, -8.80689177e-02,  1.59314555e+00],
    [-2.97865839e-01, -8.54537838e-02,  1.59631850e+00],
    [-2.88750279e-01, -8.28386498e-02,  1.59949146e+00],
    [-2.79634719e-01, -8.02235158e-02,  1.60266441e+00],
    [-1.96745105e-01, -6.27191884e-02,  1.63480355e+00],
    [-1.33146384e-01, -4.24449348e-02,  1.65587859e+00],
    [-1.24060853e-01, -3.95486128e-02,  1.65888931e+00],
    [-1.14975321e-01, -3.66522909e-02,  1.66190003e+00],
    [-1.05889790e-01, -3.37559689e-02,  1.66491075e+00],
    [-9.68042581e-02, -3.08596470e-02,  1.66792147e+00],
    [-8.77187265e-02, -2.79633250e-02,  1.67093219e+00]])

error = []
for _ in range(100): # 100 loop test
    # Update index in the reference sequence
    ref_index += 1

    # Stop at the end of the sequence
    if ref_index >= len(sequence):
        break

    # At the end of the sequence, add multiples of the last element
    reference_trajectory = sequence
    if (ref_index + controller.N >= sequence.shape[0]):
        added_points = np.repeat([sequence[-1]], controller.N, axis=0)
        reference_trajectory = np.vstack([sequence, added_points])

    u = controller.compute_control(reference_trajectory[ref_index:ref_index + controller.N])

    est_pos = controller.A @ controller.x0 + controller.B @ u

    controller.update_state(est_pos)

    error.append(np.linalg.norm(est_pos-position))

fig = plt.figure()
plt.plot(range(len(sequence)-1), error)
plt.legend(["Error"])
plt.show()
